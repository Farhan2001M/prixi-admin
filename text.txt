i had a collection my mongodb named as VehiclesData in which each doucment looks like this..

{
  "_id": {
    "$oid": "66eafd92295025a4c7bede4c"
  },
  "M_id": 1,
  "name": "Tesla",
  "models": [
    {
      "id": 1,
      "model": "Model S",
      "description": "Luxury electric sedan",
      "launchPrice": "$74,990",
      "vehicleType": "Sedan",
      "seatingCapacity": "5",
      "engineType": "Electric",
      "colorsAvailable": [
        "Red",
        "Black"
      ],
      "horsepower": "670",
      "torque": "824 Nm",
      "transmission": "Single-speed",
      "releaseDate": "2012-06-22",
      "startingPrice": "$89,990",
      "variants": [
        "Long Range",
        "Plaid"
      ],
      "img": []
    },
    {
      "id": 2,
      "model": "Model 3",
      "description": "Affordable electric sedan",
      "launchPrice": "$39,990",
      "vehicleType": "Sedan",
      "seatingCapacity": "5",
      "engineType": "Electric",
      "colorsAvailable": [
        "Black",
        "White"
      ],
      "horsepower": "283",
      "torque": "450 Nm",
      "transmission": "Single-speed",
      "releaseDate": "2017-07-28",
      "startingPrice": "$39,990",
      "variants": [
        "Standard Range Plus",
        "Long Range",
        "Performance"
      ],
      "img": []
    }
  ]
}




in my project which has frontend in next with typescript and backend in fastapi,
i was getting my car brands name from my collection showing them like this..


import React, { useEffect, useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';

interface Car {
  M_id: number;
  name: string;
}

const CarBrands: React.FC = () => {
  const [brands, setBrands] = useState<Car[]>([]);  // State to hold brand data

  // Fetch brand data from the backend
  useEffect(() => {
    const fetchBrands = async () => {
      try {
        const response = await fetch('http://localhost:8000/get-car-brands');  // New API endpoint
        const data = await response.json();
        setBrands(data);  // Store fetched brands in state
      } catch (error) {
        console.error('Error fetching car brands:', error);
      }
    };
    fetchBrands();
  }, []);

  // Function to split the data into rows with 7 car brands each
  const chunkArray = (array: Car[], chunkSize: number): Car[][] => {
    const result: Car[][] = [];
    for (let i = 0; i < array.length; i += chunkSize) {
      result.push(array.slice(i, i + chunkSize));
    }
    return result;
  };

  // Split the car data into rows 
  const rows = chunkArray(brands, 7);

  const pathname = usePathname();  // Get current path

  return (
    <table className="min-w-full divide-y divide-gray-200 border border-gray-300 ">
      <tbody className="bg-white divide-y divide-gray-200">
        {rows.map((row, rowIndex) => (
          <tr key={rowIndex} className="text-center">
            {row.map((brand) => {
              const linkUrl = /carsbrands/${brand.name}${brand.M_id};  // Create the link URL (brand name + id)
              const isActive = pathname === linkUrl;  // Check if the link URL matches the current route

              return (
                <td
                  key={brand.M_id}
                  className="text-xl font-medium" >
                  <Link
                    href={linkUrl}
                    className={block py-1 px-2 rounded transition-colors duration-500 ${
                      isActive ? 'bg-black text-white' : 'text-black hover:bg-black hover:text-white active:bg-slate-400'
                    }}
                  >
                    {brand.name}
                  </Link>
                </td>
              );
            })}

            {/* Add empty cells if the row has fewer than 7 items */}
            {row.length < 7 && (
              <>
                {Array.from({ length: 7 - row.length }).map((_, i) => (
                  <td
                    key={empty-${i}}
                    className="px-2 py-2 whitespace-nowrap"
                  ></td>
                ))}
              </>
            )}
          </tr>
        ))}
      </tbody>
    </table>
  );
};

export default CarBrands;



its backend code in fastapi was like this..

here i access the collection  

# MongoDB Driver
import motor.motor_asyncio

client = motor.motor_asyncio.AsyncIOMotorClient('mongodb://localhost:27017')

db = client.PrixiDB
collection = db.VehicleData

and in my routes folder the route was this..

@router.get("/get-car-brands")
async def get_car_brands():
    # Fetch only the id and name fields from the VehicleData collection
    car_brands = await collection.find({}, {"_id": 0, "M_id": 1, "name": 1}).to_list(length=None)
    if not car_brands:
        raise HTTPException(status_code=404, detail="No car brands found")
    return car_brands





, now i want to replace my previous collection with another similar collection named as Vehicles which also has many documents for car brands with their data 

in the new Vehicles collection each document looks like this..


{
  "_id": {
    "$oid": "66eafd92295025a4c7bede4c"
  },
  "brandName": "Tesla",
  "models": [
    {
      "modelName": "Roadster",
      "vehicleType": "Sedan",
      "engineType": "Electric",
      "description": "many cameras and very uniwqe car",
      "torque": 845,
      "launchPrice": 5845,
      "horsepower": 53,
      "seatingCapacity": 12,
      "variants": [
        "variant 1",
        "variant 2"
      ],
      "colors": [
        "Red",
        "blue"
      ],
      "img": [
        "image 1 stored in base64 form",
        "image 2 stored in base64 form"
      ],
      "comments":[]
    },
    {
      "modelName": "modelX",
      "vehicleType": "Sedan",
      "engineType": "Electric",
      "description": "3 front, 2 side and 3 rear cameras",
      "torque": 566,
      "launchPrice": 222,
      "horsepower": 420,
      "seatingCapacity": 4,
      "variants": [
        "variant 1",
        "variant 2"
      ],
      "colors": [
        "Red",
        "blue"
      ],
      "img": [
        "image 1 stored in base64 form",
        "image 2 stored in base64 form"
      ],
      "comments":[]
    }
  ]
}


now i want you to update my frontend and my backend code to show the car brand names from my new Vehicles collection